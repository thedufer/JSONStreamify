// Generated by CoffeeScript 1.8.0
(function() {
  var JSONStream, Readable, util,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Readable = require('stream').Readable;

  util = require('./util');

  JSONStream = (function(_super) {
    __extends(JSONStream, _super);

    function JSONStream() {
      JSONStream.__super__.constructor.apply(this, arguments);
      this.push(this._startChar);
      this._hasContents = false;
      this._queue = [];
      this._reading = false;
      this.finished = false;
    }

    JSONStream.prototype._read = function() {};

    JSONStream.prototype._attemptConsume = function() {
      var isJSON, item, stream;
      if (this._reading) {
        return;
      }
      if (this._queue.length === 0) {
        if (this.finished) {
          this.push(this._endChar);
          this.push(null);
        }
        return;
      }
      item = this._queue.shift();
      if (!this._hasContents) {
        this._hasContents = true;
      } else {
        this.push(",");
      }
      this.startItem(item);
      if (item.data instanceof Readable) {
        this._reading = true;
        stream = item.data;
        isJSON = stream instanceof JSONStream;
        if (!isJSON) {
          this.push('"');
        }
        stream.on('data', (function(_this) {
          return function(data) {
            if (isJSON) {
              return _this.push(data);
            } else {
              return _this.push(util.escapeForJSON(data));
            }
          };
        })(this));
        return stream.on('end', (function(_this) {
          return function() {
            if (!isJSON) {
              _this.push('"');
            }
            _this._reading = false;
            return _this._attemptConsume();
          };
        })(this));
      } else {
        this.push(JSON.stringify(item.data));
        return this._attemptConsume();
      }
    };

    JSONStream.prototype.finish = function() {
      this.finished = true;
      this._attemptConsume();
      return this;
    };

    JSONStream.prototype.enqueue = function(item) {
      this._queue.push(item);
      return this._attemptConsume();
    };

    return JSONStream;

  })(Readable);

  module.exports = JSONStream;

}).call(this);
